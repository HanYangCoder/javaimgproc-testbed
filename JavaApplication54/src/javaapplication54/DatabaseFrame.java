/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package javaapplication54;

import java.sql.*;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author hyacinth mioten
 */
public class DatabaseFrame extends javax.swing.JFrame {

    /**
     * Creates new form DatabaseFrame
     */
    
    UserDBController userDB;
    EggFryCountDBController eggFryDB;
    
    public DatabaseFrame() {
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
//        userDB = new UserDBController();
//        eggFryDB = new EggFryCountDBController();
        //showUserTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DatabasePanel = new javax.swing.JPanel();
        ChoicesPanel = new javax.swing.JPanel();
        HomeButton = new javax.swing.JButton();
        ImgProcButton = new javax.swing.JButton();
        ForecastButton = new javax.swing.JButton();
        Choices2Panel = new javax.swing.JPanel();
        Separator = new javax.swing.JSeparator();
        Users = new javax.swing.JButton();
        EggFryCount = new javax.swing.JButton();
        Forecast = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        DisplayField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DatabasePanel.setMaximumSize(new java.awt.Dimension(1920, 1080));
        DatabasePanel.setMinimumSize(new java.awt.Dimension(1920, 1080));
        DatabasePanel.setLayout(null);

        ChoicesPanel.setOpaque(false);

        HomeButton.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        HomeButton.setText("Home");
        HomeButton.setBorder(null);
        HomeButton.setBorderPainted(false);
        HomeButton.setContentAreaFilled(false);
        HomeButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        HomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeButtonActionPerformed(evt);
            }
        });

        ImgProcButton.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ImgProcButton.setText("Egg/Fry Count");
        ImgProcButton.setBorder(null);
        ImgProcButton.setBorderPainted(false);
        ImgProcButton.setContentAreaFilled(false);
        ImgProcButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        ImgProcButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImgProcButtonActionPerformed(evt);
            }
        });

        ForecastButton.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        ForecastButton.setText("Forecast");
        ForecastButton.setBorder(null);
        ForecastButton.setBorderPainted(false);
        ForecastButton.setContentAreaFilled(false);
        ForecastButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        javax.swing.GroupLayout ChoicesPanelLayout = new javax.swing.GroupLayout(ChoicesPanel);
        ChoicesPanel.setLayout(ChoicesPanelLayout);
        ChoicesPanelLayout.setHorizontalGroup(
            ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoicesPanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(HomeButton)
                .addGap(29, 29, 29)
                .addComponent(ImgProcButton)
                .addGap(31, 31, 31)
                .addComponent(ForecastButton)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        ChoicesPanelLayout.setVerticalGroup(
            ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChoicesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChoicesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImgProcButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ForecastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        DatabasePanel.add(ChoicesPanel);
        ChoicesPanel.setBounds(10, 10, 320, 60);

        Choices2Panel.setOpaque(false);

        Separator.setBackground(new java.awt.Color(0, 0, 0));
        Separator.setForeground(new java.awt.Color(0, 0, 0));
        Separator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        Separator.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        Users.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Users.setText("Users");
        Users.setBorder(null);
        Users.setContentAreaFilled(false);
        Users.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsersActionPerformed(evt);
            }
        });

        EggFryCount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        EggFryCount.setText("Previous Egg/Fry Count");
        EggFryCount.setBorder(null);
        EggFryCount.setContentAreaFilled(false);
        EggFryCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EggFryCountActionPerformed(evt);
            }
        });

        Forecast.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        Forecast.setText("Previous Forecast");
        Forecast.setBorder(null);
        Forecast.setContentAreaFilled(false);
        Forecast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForecastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Choices2PanelLayout = new javax.swing.GroupLayout(Choices2Panel);
        Choices2Panel.setLayout(Choices2PanelLayout);
        Choices2PanelLayout.setHorizontalGroup(
            Choices2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Choices2PanelLayout.createSequentialGroup()
                .addGap(0, 20, Short.MAX_VALUE)
                .addGroup(Choices2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(EggFryCount, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Users, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Forecast, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(Choices2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Choices2PanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Separator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(198, Short.MAX_VALUE)))
        );
        Choices2PanelLayout.setVerticalGroup(
            Choices2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Choices2PanelLayout.createSequentialGroup()
                .addGap(178, 178, 178)
                .addComponent(Users, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(EggFryCount, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(Forecast, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
            .addGroup(Choices2PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Choices2PanelLayout.createSequentialGroup()
                    .addContainerGap(85, Short.MAX_VALUE)
                    .addComponent(Separator, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(85, Short.MAX_VALUE)))
        );

        DatabasePanel.add(Choices2Panel);
        Choices2Panel.setBounds(20, 80, 210, 530);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        DatabasePanel.add(jButton1);
        jButton1.setBounds(140, 557, 140, 80);

        DisplayField.setEditable(false);
        DisplayField.setBackground(new java.awt.Color(255, 255, 255));
        DisplayField.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        DisplayField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        DisplayField.setText("Users' Record");
        DisplayField.setBorder(null);
        DisplayField.setOpaque(false);
        DatabasePanel.add(DisplayField);
        DisplayField.setBounds(410, 20, 200, 50);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User ID", "First Name", "Last Name", "Password", "Contact Num", "Email", "Address"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        DatabasePanel.add(jScrollPane1);
        jScrollPane1.setBounds(410, 90, 820, 580);

        Background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/javaapplication54/Images/I_BG.png"))); // NOI18N
        DatabasePanel.add(Background);
        Background.setBounds(-120, -10, 1580, 980);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(DatabasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1287, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(DatabasePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeButtonActionPerformed
        new HomeFrame().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_HomeButtonActionPerformed

    private void ImgProcButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImgProcButtonActionPerformed
        new ThesisJFrame().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_ImgProcButtonActionPerformed

    private void ForecastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForecastActionPerformed
        new ForecastFrame().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_ForecastActionPerformed

    private void UsersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsersActionPerformed
        // TODO add your handling code here:
        try{
            
            ConnController dbConn = new ConnController();
            Connection userConn;
            userConn = dbConn.getConnection();
            Statement getUsersStmt = userConn.createStatement();
            String getUsersSQL = "SELECT * FROM userDB";
            ResultSet userList = getUsersStmt.executeQuery(getUsersSQL);
            
            while(userList.next()){
                
                String userID = String.valueOf(userList.getInt("userID"));
                String firstName = userList.getString("firstName");
                String lastName = userList.getString("lastName");
                String password = userList.getString("password");
                String contactNum = userList.getString("contactNum");
                String email = userList.getString("email");
                String address = userList.getString("address");
                
                System.out.println(userID+firstName+lastName+password+contactNum+email+address);
                
                //String tbData[] = {userID, firstName, lastName, password, contactNum, email, address};
                
                DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
                tbModel.addRow(new Object[]{userID,firstName,lastName,password,contactNum,email,address});
                //table.setModel(tbModel);
                
            }
            
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_UsersActionPerformed

    private void EggFryCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EggFryCountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EggFryCountActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try{
            
            ConnController dbConn = new ConnController();
            Connection userConn;
            userConn = dbConn.getConnection();
            Statement getUsersStmt = userConn.createStatement();
            String getUsersSQL = "SELECT * FROM userDB";
            ResultSet userList = getUsersStmt.executeQuery(getUsersSQL);
            
            while(userList.next()){
                
                String userID = String.valueOf(userList.getInt("userID"));
                String firstName = userList.getString("firstName");
                String lastName = userList.getString("lastName");
                String password = userList.getString("password");
                String contactNum = userList.getString("contactNum");
                String email = userList.getString("email");
                String address = userList.getString("address");
                
                System.out.println(userID+firstName+lastName+password+contactNum+email+address);
                
                //String tbData[] = {userID, firstName, lastName, password, contactNum, email, address};
                
                DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
                tbModel.addRow(new Object[]{userID,firstName,lastName,password,contactNum,email,address});
                //table.setModel(tbModel);
                
            }
            
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void showUserTable(){
        /*DefaultTableModel model = new DefaultTableModel();
        String[] columnNames = {"User ID","First Name","Last Name","Contact Number","E-mail","Address"};
        model.setColumnIdentifiers(columnNames);
        
        table.setModel(model);*/
//        ResultSet userList = null;
        
//        JScrollPane scroll = new JScrollPane(table);
//        scroll.setHorizontalScrollBarPolicy(
//        JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
//        scroll.setVerticalScrollBarPolicy(
//        JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        
//        try {
//            table = new JTable(buildTableModel(userDB.getUserList()));
//            
//        } catch (SQLException ex) {
//            JOptionPane.showMessageDialog(null, ex.getMessage(),"Error",
//            JOptionPane.ERROR_MESSAGE);
//        }
        
        
            /*
            String uID = "";
            String fName = "";
            String lName = "";
            String conNum = "";
            String email = "";
            String address = "";
            
            try {
            
            userList = userDB.getUserList();
            int i=0;
            
            if(userList.next())
            {
            uID = userList.getString("userID");
            fName = userList.getString("firstName");
            lName = userList.getString("lastName");
            conNum = userList.getString("contactNum");
            email = userList.getString("email");
            address = userList.getString("address");
            model.addRow(new Object[]{uID,fName,lName,conNum,email,address});
            i++;
            }
            
            System.out.println("user table created");
            
            if(i < 1)
            {
            JOptionPane.showMessageDialog(null, "No Record Found","Error",
            JOptionPane.ERROR_MESSAGE);
            }
            else if(i == 1)
            {
            System.out.println(i+" Record Found");
            }
            else
            {
            System.out.println(i+" Records Found");
            }
            
            } catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage(),"Error",
            JOptionPane.ERROR_MESSAGE);
            }
            */
            
            //table.setModel(DbUtils.resultSetToTableModel(userList.getUserList()));
            
        try {
            ConnController dbConn = new ConnController();
            Connection userConn;
            userConn = dbConn.getConnection();
            Statement getUsersStmt = userConn.createStatement();
            String getUsersSQL = "SELECT * FROM userDB";
            ResultSet userList = getUsersStmt.executeQuery(getUsersSQL);
            System.out.println("Retrieved data from database");
            
//            if(userList.next())
//            {
//                String firstName = userList.getString("firstName");
//                System.out.println("Hello user "+firstName);
//            }
            
            jTable1.setModel(DbUtils.resultSetToTableModel(userList));
//            table = new JTable(buildTableModel(userList));
//            JOptionPane.showMessageDialog(null, new JScrollPane(table));

//            while(table.getRowCount() > 0) 
//            {
//                ((DefaultTableModel) table.getModel()).removeRow(0);
//            }
//            int columns = userList.getMetaData().getColumnCount();
//            while(userList.next())
//            {  
//                Object[] row = new Object[columns];
//                for (int i = 1; i <= columns; i++)
//                {  
//                    row[i - 1] = userList.getObject(i);
//                }
//                ((DefaultTableModel) table.getModel()).insertRow(userList.getRow()-1,row);
//            }
            
//            ResultSetMetaData rsmd = userList.getMetaData();
//            int columnsNumber = rsmd.getColumnCount();
//            while (userList.next()) {
//                for (int i = 1; i <= columnsNumber; i++) {
//                    if (i > 1) System.out.print(",  ");
//                    String columnValue = userList.getString(i);
//                    System.out.print(columnValue + " " + rsmd.getColumnName(i));
//                }
//                System.out.println("");
//            }
            
//            userConn.close();

        } catch (SQLException e) {
            System.out.println(e);
        }
        
    }
    
    private void getUserTable(){
        
        DefaultTableModel model = new DefaultTableModel();
        String[] columnNames = {"User ID","First Name","Last Name","Password","Contact Number","E-mail","Address"};
        model.setColumnIdentifiers(columnNames);
        
        jTable1.setModel(model);
        
        try{
            
            ConnController dbConn = new ConnController();
            Connection userConn;
            userConn = dbConn.getConnection();
            Statement getUsersStmt = userConn.createStatement();
            String getUsersSQL = "SELECT * FROM userDB";
            ResultSet userList = getUsersStmt.executeQuery(getUsersSQL);
            
            while(userList.next()){
                
                String userID = String.valueOf(userList.getInt("userID"));
                String firstName = userList.getString("firstName");
                String lastName = userList.getString("lastName");
                String password = userList.getString("password");
                String contactNum = userList.getString("contactNum");
                String email = userList.getString("email");
                String address = userList.getString("address");
                
                String tbData[] = {userID, firstName, lastName, password, contactNum, email, address};
                
                DefaultTableModel tbModel = (DefaultTableModel) jTable1.getModel();
                tbModel.addRow(tbData);
                
            }
            
            
//            ResultSetMetaData rsmd = userList.getMetaData();
//            int columnsNumber = rsmd.getColumnCount();
//            while (userList.next()) {
//                for (int i = 1; i <= columnsNumber; i++) {
//                    if (i > 1) System.out.print(",  ");
//                    String columnValue = userList.getString(i);
//                    System.out.print(columnValue + " " + rsmd.getColumnName(i));
//                }
//                System.out.println("");
//            }
            
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    public static DefaultTableModel buildTableModel(ResultSet rs)
        throws SQLException {

    ResultSetMetaData metaData = rs.getMetaData();

    // names of columns
    Vector<String> columnNames = new Vector<String>();
    int columnCount = metaData.getColumnCount();
    for (int column = 1; column <= columnCount; column++) {
        columnNames.add(metaData.getColumnName(column));
    }

    // data of the table
    Vector<Vector<Object>> data = new Vector<Vector<Object>>();
    while (rs.next()) {
        Vector<Object> vector = new Vector<Object>();
        for (int columnIndex = 1; columnIndex <= columnCount; columnIndex++) {
            vector.add(rs.getObject(columnIndex));
        }
        data.add(vector);
    }

    return new DefaultTableModel(data, columnNames);

}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Background;
    private javax.swing.JPanel Choices2Panel;
    private javax.swing.JPanel ChoicesPanel;
    private javax.swing.JPanel DatabasePanel;
    private javax.swing.JTextField DisplayField;
    private javax.swing.JButton EggFryCount;
    private javax.swing.JButton Forecast;
    private javax.swing.JButton ForecastButton;
    private javax.swing.JButton HomeButton;
    private javax.swing.JButton ImgProcButton;
    private javax.swing.JSeparator Separator;
    private javax.swing.JButton Users;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
